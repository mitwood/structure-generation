from mpi4py import MPI
from GRSlib.GRS import GRS
import random, copy, os, glob, shutil
import numpy as np

comm = MPI.COMM_WORLD
rank = comm.Get_rank()
nprocs = comm.Get_size()

settings = \
{
"BASIS":
    {
    "descriptor": "ACE",
    "numTypes": 1,
    "elements": "W",
    "rcutfac": 5.5,
    "lambda": 1.4,
    "ranks": "1 2 3",
    "lmax": "0 3 3",
    "lmin": "0 0 0",
    "nmax": "8 1 1",
    "nmaxbase": 8,
    "bzeroflag": 0
    },
"SCORING":
    {
    "moments": "mean stdev" ,
    "moments_coeff": "1.0 0.1",
    "strength_target": 1.0, #Positive number attracts structures to target, negative away from
    "strength_prior": 0.0 #Positive number attracts structures to prior, negative away from
    },
"TARGET":
    {
    "target_fname": "bcc.data", #54 atom cell of perfect BCC crystal
    "start_fname": "notbcc.data", #54 atom cell where atoms have been displaced away from BCC
    "job_prefix": "GRSOutput"
    },
"MOTION":
    {
    "soft_strength": 0.5,
    "ml_strength": 1.0,
    "nsteps": 10000,
    "min_type": "line"
    }
}

grs = GRS(settings,comm=comm)

updated_struct = settings["TARGET"]["start_fname"] # set your starting point 
grs.set_prior([updated_struct]) # set the prior descriptors to your starting point so you can 'push' away 
                                # from the starting point with a non-zero strength_prior. 

for i in range(10):
    updated_struct = grs.gradient_move(updated_struct) #Take a gradient move of the structure
    updated_struct = grs.update_start(updated_struct,"MinScore") # Check to see if the score improved
    grs.set_prior(glob.glob(settings['TARGET']["job_prefix"]+"*")) #Update prior descriptors with structures generated by the gradient move
